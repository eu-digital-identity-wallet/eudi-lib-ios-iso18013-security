    /*
Copyright (c) 2023 European Commission

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import Testing
import Foundation
@testable import MdocDataModel18013
@testable import MdocSecurity18013

@Suite("MSO Validation Tests")
struct MsoValidationTests {

    @Test("MSO verifications run successfully")
    func testMsoValidations() async throws {
        let strData = ""
        let base64Data = try #require(Data(base64URLEncoded: strData))
		let dr = try DeviceResponse(data: [UInt8](base64Data))
		let iss = try #require(dr.documents?.first?.issuerSigned)
        do {
            try iss.validateMSO(docType: "eu.europa.ec.eudi.pid.1", trustedIACA: [])
        } catch {
            // Expected to fail due to missing/invalid certificates in x5chain
            switch error {
            case .multipleErrors(let errors):
                errors.forEach { print($0.errorDescription ?? "Unknown error") }
            default: print(error.errorDescription ?? "Unknown error") }
        }
    }


}
